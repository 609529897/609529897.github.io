<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端 Cache</title>
    <url>/2020/05/30/Cache/</url>
    <content><![CDATA[<h2 id="前端缓存-后端缓存"><a href="#前端缓存-后端缓存" class="headerlink" title="前端缓存/后端缓存"></a>前端缓存/后端缓存</h2><p>基本的网络请求分为三个步骤 <code>请求</code>、<code>处理</code>、<code>响应</code>。</p>
<p>而后端缓存主要集中在 <code>处理</code> 步骤，通过保留数据库连接或者保存处理结果来缩短处理时间尽快进入“响应”步骤。</p>
<p>而前端缓存那就集中在 <code>请求</code> 和 <code>响应</code> 步骤，响应需要跟后端共同配合。浏览器可以通过存储结果的方式省去发送</p>
<p>请求的步骤，响应阶段可以减少响应内容来缩短传输时间。</p>
<p><strong>缓存的分类</strong></p>
<p>按缓存位置：</p>
<ul>
<li>memory cache  内存缓存</li>
<li>disk cache          硬盘缓存</li>
<li>Service Worker  Cache Storage</li>
</ul>
<p>按失效策略：</p>
<ul>
<li>强缓存                  Cache-Control, Expires</li>
<li>协商缓存               Last-Modified &amp; If-Modified-Since, Etag &amp; If-None-Match</li>
</ul>
<p>Cache-Control 常用的值</p>
<ul>
<li><code>max-age</code>：即最大有效时间</li>
<li><code>must-revalidate</code>：如果超过了 <code>max-age</code> 的时间，浏览器必须向服务器发送请求，验证资源是否还有效。</li>
<li><code>no-cache</code>：虽然字面意思是“不要缓存”，但实际上还是要求客户端缓存内容的，只是是否使用这个内容由后续的对比来决定。</li>
<li><code>no-store</code>: 真正意义上的“不要缓存”。所有内容都不走缓存，包括强制和对比。</li>
<li><code>public</code>：所有的内容都可以被缓存 (包括客户端和代理服务器， 如 CDN)</li>
<li><code>private</code>：所有的内容只有客户端才可以缓存，代理服务器不能缓存。默认值。</li>
</ul>
<blockquote>
<p><strong>Cache-control 的优先级高于 Expires</strong>，为了兼容 HTTP/1.0 和 HTTP/1.1，实际项目中两个字段我们都会设置。</p>
</blockquote>
<p>当浏览器要请求资源时</p>
<ol>
<li><p>调用 Service Worker 的 <code>fetch</code> 事件响应</p>
</li>
<li><p>查看 memory cache</p>
</li>
<li><p>查看 disk cache。这里又细分：</p>
</li>
<li><ul>
<li>如果有强制缓存且未失效，则使用强制缓存，不请求服务器。这时的状态码全部是 200</li>
</ul>
</li>
<li><ul>
<li>如果有强制缓存但已失效，使用对比缓存，比较后确定 304 还是 200</li>
</ul>
</li>
<li><p>发送网络请求，等待网络响应</p>
</li>
<li><p>把响应内容存入 disk cache (如果 HTTP 头信息配置可以存的话)</p>
</li>
<li><p>把响应内容 <strong>的引用</strong> 存入 memory cache (无视 HTTP 头信息的配置)</p>
</li>
<li><p>把响应内容存入 Service Worker 的 Cache Storage (如果 Service Worker 的脚本调用了 <code>cache.put()</code>)</p>
</li>
</ol>
<blockquote>
<p>原文：<a href="https://zhuanlan.zhihu.com/p/44789005" target="_blank" rel="noopener">小蘑菇哥哥</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 事件订阅模式实现</title>
    <url>/2020/05/25/EventFuc/</url>
    <content><![CDATA[<p><strong>事件订阅模式</strong></p>
<p>你从淘宝上选购了一件衣服，但是你穿的尺码刚好断货，店员向你保证会上货。这时你对店员说当这件衣服有我尺码的时候给我发送信息（订阅 listen）。过了几天新货上架，店员通知了所有的订阅的用户新货上架了（发布trigger）。这就是事件订阅的逻辑了，当然你也可以取消订阅（取消订阅 remove）。下面代码是事件订阅模式的简单JS实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> Event = &#123;<br>    <span class="hljs-comment">// 存储订阅信息</span><br>    list: &#123;&#125;,<br>    <span class="hljs-comment">// 订阅</span><br>    listen: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key, fn</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.list[key]) &#123;<br>            <span class="hljs-keyword">this</span>.list[key] = []<br>        &#125;<br>        <span class="hljs-keyword">this</span>.list[key].push(fn)<br>    &#125;,<br>    <span class="hljs-comment">// 发布</span><br>    trigger: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> key = <span class="hljs-built_in">Array</span>.prototype.shift.call(<span class="hljs-built_in">arguments</span>)<br>        <span class="hljs-keyword">let</span> fns = <span class="hljs-keyword">this</span>.list[key]<br>        <span class="hljs-keyword">if</span> (!fns || fns.length === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, fn; fn = <span class="hljs-keyword">this</span>.list[i++];) &#123;<br>            fn.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>)<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 取消订阅</span><br>    remove: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key, fn</span>) </span>&#123;<br>        fns = <span class="hljs-keyword">this</span>.list[key]<br>        <span class="hljs-keyword">if</span> (!fns) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> &#125;<br>        <span class="hljs-comment">// 没有指定对象，默认全取消</span><br>        <span class="hljs-keyword">if</span> (!fn) &#123;<br>            fns &amp;&amp; (fns.length = <span class="hljs-number">0</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = fns.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> ;i--) &#123;<br>                <span class="hljs-keyword">if</span> (fns[i] === fn) &#123;<br>                    fns.splice(i, <span class="hljs-number">1</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 给普通对象添加以上方法</span><br>    addEvent: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> Event) &#123;<br>            obj[i] = Event[i]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<p>Ajax 请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 传统写法，代码就非常耦合</span><br>$.ajax(<span class="hljs-string">'http://127.0.0.1/index.php'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>    rendedData(data);  <span class="hljs-comment">// 渲染数据</span><br>    doAnimate(data);  <span class="hljs-comment">// 实现动画 </span><br>&#125;);<br></code></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 事件订阅模式，实现代码的分离</span><br>$.ajax(“http:<span class="hljs-comment">//127.0.0.1/index.php”,function(data)&#123;</span><br>    Obj.trigger(<span class="hljs-string">'success'</span>,data);  <span class="hljs-comment">// 发布请求成功后的消息</span><br>&#125;);<br><span class="hljs-comment">// 下面我们来订阅此消息，比如我现在订阅渲染数据这个消息；</span><br>Obj.listen(<span class="hljs-string">'success'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>   renderData(data);<br>&#125;);<br><span class="hljs-comment">// 订阅动画这个消息</span><br>Obj.listen(<span class="hljs-string">'success'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>   doAnimate(data); <br>&#125;);<br></code></pre></td></tr></table></figure>

<p>模块间通信</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--订阅模式模块--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"global.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"count"</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"showcount"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">"a.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">"b.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// a.js</span><br><span class="hljs-keyword">let</span> a = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> button = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"count"</span>);<br>    button.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        Event.trigger(<span class="hljs-string">"add"</span>,count++);<br>    &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// b.js</span><br><span class="hljs-keyword">let</span> b = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"showcount"</span>);<br>    Event.listen(<span class="hljs-string">'add'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">count</span>)</span>&#123;<br>        div.innerHTML = count;<br>    &#125;);<br>&#125;)();<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Event Loop</title>
    <url>/2020/05/20/EventLoop/</url>
    <content><![CDATA[<p>Event Loop 是为了 JS 进行异步操作时避免发生阻塞而设计的事件机制。</p>
<ul>
<li><p>JS 是单线程语言，所以同一时间只能做一件事</p>
</li>
<li><p>如果进行异步操作，没有 Event loop 机制程序会一直等着完成异步操作而发生阻塞</p>
</li>
<li><p>异步操作：Promise、setTimeout、setInterval</p>
</li>
<li><p>可以使用 H5 的 Web Worker 进行多线程操作，但是流行</p>
</li>
</ul>
<p>机制</p>
<ul>
<li><p>简言之就是 JS 只有一个主线程，主线程执行完执行栈的任务后去检查异步的任务队列，如果异步事件触发，则将其加到主线程的执行栈。</p>
</li>
<li><p>异步操作会放入异步的任务队列</p>
</li>
<li><p>异步操作又被分为 <code>宏任务</code> 和 <code>微任务</code> 来执行</p>
</li>
</ul>
<p>任务队列</p>
<ul>
<li>宏任务：<code>setInterval</code>、<code>setTimeout</code></li>
<li>微任务：<code>new Promise</code>、<code>MutaionObserver</code></li>
</ul>
<p>执行规则</p>
<ul>
<li><p>主线程同步操作 =&gt; 微任务 =&gt; 宏任务</p>
</li>
<li><p>第一步执行主线程的同步操作，第二步如果有微任务放入主线程执行没有的话去查看宏任务，最后当主线程和微任务检查和执行完毕后把宏任务放到主线程执行</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 比较对象是否相等</title>
    <url>/2020/05/24/deepEqualFunc/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> deepEqual = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (x === y) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">"object"</span> &amp;&amp; x != <span class="hljs-literal">null</span>) &amp;&amp; (<span class="hljs-keyword">typeof</span> y === <span class="hljs-string">"object"</span> &amp;&amp; y != <span class="hljs-literal">null</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.keys(x).length != <span class="hljs-built_in">Object</span>.keys(y).length) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> prop <span class="hljs-keyword">in</span> x) &#123;<br>      <span class="hljs-keyword">if</span> (y.hasOwnProperty(prop)) &#123;<br>        <span class="hljs-keyword">if</span> (!deepEqual(x[prop], y[prop])) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>git 基本指令</title>
    <url>/2020/05/04/git%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>提交文件</strong></p>
<p>初始化 Git <code>git init</code> </p>
<p>把修改和新增的文件提交到暂存区 <code>git add .</code></p>
<p>提交暂存区的文件到仓库 <code>git commit -m &quot;对提交的描述&quot;</code></p>
<p>查看文件状态 <code>git status</code>：</p>
<ul>
<li>红色：新建文件、文件内容被改动、文件被删除</li>
<li>绿色：在暂存区等待被 commit</li>
<li>working tree clean：已经 commit 或者文档没有被改动</li>
</ul>
<hr>
<p><strong>版本回退</strong></p>
<p>查看提交历史 <code>git log</code></p>
<p>查看命令历史 <code>git reflog</code></p>
<p>回退到上一个版本（就是上一次 commit 前的状态）<code>git reset --hard HEAD^</code></p>
<blockquote>
<p>^ 表示上一个版本，^^ 表示上上一个版本依次类推</p>
</blockquote>
<p>回退到上一个指定的版本 <code>git reset --hard commit_id</code></p>
<blockquote>
<p>commit_id：使用 git log 查看</p>
</blockquote>
<hr>
<p><strong>远程仓库</strong></p>
<blockquote>
<p>以 Github 为例，配置 Github <a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416" target="_blank" rel="noopener">廖雪峰 Git 教程</a></p>
</blockquote>
<p>配置密钥创建远程仓库后，关联远程仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git remote add origin git@你的 github 地址/仓库名.git<br></code></pre></td></tr></table></figure>

<p>推送到远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git push -u origin master<br></code></pre></td></tr></table></figure>

<blockquote>
<p>以后想要推送到远程仓库只要 <code>git commit -m &quot;msg&quot;</code> 后 <code>git push</code> 就可以</p>
</blockquote>
<p>克隆仓库文件到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git@github.com:xxx/xxx.git<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>分支操作</strong></p>
<blockquote>
<p>master 是主分支，公司一般用于上线项目。而平常提交代码一般会在另外新建分支进行提交</p>
</blockquote>
<p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<hr>
<p><strong>标签管理</strong></p>
<p>命令<code>git tag &lt;tagname&gt;</code> 用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</p>
<p>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p>
<p>命令<code>git tag</code>可以查看所有标签。</p>
<p>操作标签：</p>
<ul>
<li>命令<code>git push origin</code>可以推送一个本地标签；</li>
<li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>
<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li>
<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li>
</ul>
<hr>
<blockquote>
<p>详细内容 <a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰 Git 教程</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>计算机软件</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 创建博客踩的坑</title>
    <url>/2020/05/03/hexo%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>​        第一次写博客那就吐槽一下用 hexo 创建博客踩的坑吧</p>
<p>​        这尼玛如果在 source/_posts 目录下没有 .md 文件是不能 <code>hexo g</code> 创建 .html 静态文件的，废了老半天劲才</p>
<p>发现。气死我了希望大家别踩我这坑了！（自动创建后有一个 hello_world.md 文件的，但我这人强迫症发作把它</p>
<p>删了😀）</p>
]]></content>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>redux, react-redux</title>
    <url>/2020/05/07/redux/</url>
    <content><![CDATA[<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><ul>
<li><p>全局状态管理模块</p>
</li>
<li><p>管理组件之间传递的数据</p>
</li>
</ul>
<p><strong>三个重要部分</strong></p>
<ul>
<li><p><code>action</code></p>
</li>
<li><p><code>reducer</code>：进行状态修改</p>
</li>
<li><p><code>state(store)</code>：存储数据的地方</p>
</li>
</ul>
<blockquote>
<p>dispatch 是派发的事件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">import &#123; createStore &#125; from &#39;redux&#39;<br><br>&#x2F;&#x2F; reducer<br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>  return state<br>&#125;;<br><br>&#x2F;&#x2F; store<br>const store &#x3D; createStore(counterReducer);<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; 如果需要改变一个 reducer 的值，需要使用 dispatch 派发一个 action<br>&#x2F;&#x2F; action 需要两个参数<br>&#x2F;&#x2F; 1. type    需要使用 type 区分对 state 做什么操作<br>&#x2F;&#x2F; 2. payload 传递的数据<br><br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>  switch (action.type) &#123;<br>    case &#39;COUNT_ADD&#39;:<br>      return &#123;<br>        ...state, count: state.count + 1<br>      &#125;;<br>    case &#39;COUNT_REDUCE&#39;:<br>      return &#123;<br>        ...state, count: state.count - 1<br>      &#125;;<br>    default:<br>      return state;<br>  &#125;;<br>&#125;;<br><br>const store &#x3D; createStore(counterReducer);<br><br>store.dispatch(&#123;<br>  type: &#39;COUNT_ADD&#39;,<br>  payload: &#123;&#125;<br>&#125;);<br><br>store.dispatch(&#123;<br>  type: &#39;COUNT_REDUCE&#39;,<br>  payload: &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p><strong>使用 chrome 插件查看状态</strong></p>
<ul>
<li>Redux DevTools</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">const store &#x3D; createStore( <br>    counterReducer<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>使用多个 reducer</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F;使用 combineReducers<br>import &#123; createStore, combineReducers &#125; from &#39;redux&#39;<br><br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>  switch (action.type) &#123;<br>    case &#39;COUNT_ADD&#39;:<br>      return &#123;<br>        ...state, count: state.count + 1<br>      &#125;;<br>    case &#39;COUNT_REDUCE&#39;:<br>      return &#123;<br>        ...state, count: state.count - 1<br>      &#125;;<br>    default:<br>      return state;<br>  &#125;;<br>&#125;;<br><br>const postReducer &#x3D; (state &#x3D; &#123; list: [&#123; title: &#39;你好！&#39; &#125;] &#125;, action) &#x3D;&gt; &#123;<br>  switch (action.type) &#123;<br>    case &#39;LOAD_POST&#39;:<br>      return &#123;<br>        ...state, list: action.payload<br>      &#125;;<br>    default:<br>      return state<br>  &#125;;<br>&#125;;<br><br>&#x2F;&#x2F;通过 combineReducers 把多个 reducer 进行合并<br>const rootReducers &#x3D; combineReducers(&#123;<br>  counter: counterReducer,<br>  post: postReducer<br>&#125;);<br><br>const store &#x3D; createStore( <br>    rootReducers,<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>redux 的网络请求</strong></p>
<blockquote>
<p>json holder：网站，会提供在线的 API</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> redux 使用 redux-thunk 插件进行网络请求</span><br><span class="hljs-meta">$</span><span class="bash"> yarn add redux-thunk </span><br><span class="hljs-meta">$</span><span class="bash"> yarn add axios</span><br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; 导入需要的插件<br>import &#123; createStore, combineReducers, compose, applyMiddleware &#125; from &#39;redux&#39;<br>import &#123; get &#125; from &#39;axios&#39;<br>import thunk from &#39;redux-thunk&#39;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; 配置 store<br>const store &#x3D; createStore(<br>    rootReducers,<br>    compose(<br>        applyMiddleware(...[thunk])  &#x2F;&#x2F;需要使用的中间件数组<br>    ),<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">const getPostsRequest &#x3D; () &#x3D;&gt; &#123;<br>    return get(&#39;https:&#x2F;&#x2F;xxx.com&#x2F;posts&#39;);<br>&#125;;<br><br>store.dispatch(async (dispatch) &#x3D;&gt; &#123;<br>    const res &#x3D; await getPostsRequest();<br>    dispatch(&#123;<br>        type: &#39;LOAD_POST&#39;,<br>        payload: res.data<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>拆分代码，使其阅读更合理</strong></p>
<ul>
<li>在 src 文件夹下创建 actions 文件夹，把所有的 action 文件放在里面</li>
<li>在 src 文件夹下创建 reducers 文件夹，把所有的 reducer 文件放在里面</li>
<li>在 src 文件夹下创建 services 文件夹，把所有的关于网络请求得文件放在里面</li>
<li>在根目录下创建 store.js 文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;services&#x2F;post_api.js<br>import &#123; get &#125; from &#39;axios&#39;<br><br>export function getPosts() &#123;<br>    return get(&#39;https:&#x2F;&#x2F;xxx.com&#x2F;posts&#39;);<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;actions&#x2F;counter_action.js<br>export const countAddAction &#x3D; &#123;<br>    type: &#39;COUNT_ADD&#39;<br>&#125;<br><br>export const countReduceAction &#x3D; &#123;<br>    type: &#39;COUNT_REDUCE&#39;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;actions&#x2F;post_action.js<br>import &#123; getPosts &#125; from &#39;..&#x2F;services&#x2F;post_api&#39;<br><br>export const loadPostsAction &#x3D; async (dispatch) &#x3D;&gt; &#123;<br>    const res &#x3D; await getPosts();<br>    dispatch(&#123;<br>        type: &#39;LOAD_POSTS&#39;,<br>        payload: res.data<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;reducers&#x2F;post_reducer.js<br>const postReducer &#x3D; (state &#x3D; &#123; list: [&#123; id: 1, title: &#39;你好！&#39; &#125;] &#125;, action) &#x3D;&gt; &#123;<br>    switch (action.type) &#123;<br>        case &#39;LOAD_POST&#39;:<br>            return &#123;<br>                ...state, list: action.payload<br>            &#125;;<br>        default:<br>            return state<br>    &#125;;<br>&#125;;<br><br>export default postReducer;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;reducers&#x2F;counter_reducer.js<br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>    switch (action.type) &#123;<br>        case &#39;COUNT_ADD&#39;:<br>            return &#123;<br>                ...state, count: state.count + 1<br>            &#125;;<br>        case &#39;COUNT_REDUCE&#39;:<br>            return &#123;<br>                ...state, count: state.count - 1<br>            &#125;;<br>        default:<br>            return state;<br>    &#125;;<br>&#125;;<br><br>export default counterReducer;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;reducers&#x2F;index.js<br>&#x2F;&#x2F;合并 reducer<br>import &#123; combineReducers &#125; from &#39;redux&#39;<br><br>import counterReducer from &#39;.&#x2F;counter_reducer&#39;<br>import postReducer from &#39;.&#x2F;post_reducer&#39;<br><br>const rootReducers &#x3D; combineReducers(&#123;<br>    counter: counterReducer,<br>    post: postReducer<br>&#125;);<br><br>export default rootReducers;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;store.js<br>&#x2F;&#x2F;合并 store<br><br>import &#123; createStore, compose, applyMiddleware &#125; from &#39;redux&#39;<br>import thunk from &#39;redux-thunk&#39;<br><br>import rootReducers from &#39;.&#x2F;reducers&#x2F;index&#39;<br><br>const store &#x3D; createStore(<br>    rootReducers,<br>    compose(<br>        applyMiddleware(...[thunk])<br>    ),<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br><br>export default store;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F;引用 store<br>import store from &#39;.&#x2F;store&#39;<br><br>&#x2F;&#x2F;操作<br>import &#123; countAddAction &#125; from &#39;.&#x2F;actions&#x2F;counter_action&#39;<br>import &#123; loadPostsAction &#125; from &#39;.&#x2F;actions&#x2F;post_action&#39;<br><br>store.dispatch(countAddAction);<br>store.dispatch(loadPostsAction);<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="在-react-使用-redux"><a href="#在-react-使用-redux" class="headerlink" title="在 react 使用 redux"></a>在 react 使用 redux</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 需要安装插件</span><br><span class="hljs-meta">$</span><span class="bash"> yarn add react-redux</span><br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">import React from &#39;react&#39;<br>import ReactDOM from &#39;react-dom&#39;<br>import &#123; Provider &#125; from &#39;react-redux&#39;<br><br>import App from &#39;.&#x2F;App&#39;<br><br>import store from &#39;.&#x2F;store&#39;<br><br>&#x2F;&#x2F; 使用 react-redux 的 Provider 元素把 &lt;App &#x2F;&gt; 包裹起来，这样所有的组件都可以使用 store 里面的数据<br>ReactDOM.render(&lt;Provider store&#x3D;&#123;store&#125;&gt;<br>    &lt;App &#x2F;&gt;<br>&lt;&#x2F;Provider&gt;, document.getElementById(&#39;root&#39;));<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F;使用 connect 组件根 redux 连接<br>import React, &#123; Component &#125; from &#39;react&#39;<br>import &#123; connect &#125; from &#39;react-redux&#39;<br>import &#123; loadPostsAction &#125; from &#39;..&#x2F;actions&#x2F;post_action&#39;<br><br>class PostList extends Component &#123;<br>    constructor(props) &#123;<br>        super(props);<br>        console.log(this.props);<br>    &#125;;<br>    componentDidMount() &#123;<br>        this.props.dispatch(loadPostsAction); &#x2F;&#x2F;加载远程数据<br>    &#125;;<br>    render() &#123;<br>        const &#123; list &#125; &#x3D; this.props.post;<br>        const Posts &#x3D; list.map(post&#x3D;&gt;&#123;<br>            return (&lt;li key&#x3D;&#123;post.id&#125;&gt;&#123;post.title&#125;&lt;&#x2F;li&gt;)<br>        &#125;)<br>        return (<br>            &lt; div &gt;<br>                &lt;ul&gt;&#123; Posts &#125;&lt;&#x2F;ul&gt;<br>            &lt;&#x2F;div &gt;<br>        );<br>    &#125;;<br>&#125;;<br><br>const mapStateToProps &#x3D; (state, ownProps) &#x3D;&gt; &#123;<br>    return &#123;<br>        post: state.post<br>    &#125;;<br>&#125;;<br><br>&#x2F;&#x2F; 通过 connect 连接组件和 redux 数据，传递 state 数据和 dispatch 方法<br>export default connect(mapStateToProps)(PostList);<br></code></pre></td></tr></table></figure>

<hr>
<p>##</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
