<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo 创建博客踩的坑</title>
    <url>/2020/05/03/hexo%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>​        第一次写博客那就吐槽一下用 hexo 创建博客踩的坑吧</p>
<p>​        这尼玛如果在 source/_posts 目录下没有 .md 文件是不能 <code>hexo g</code> 创建 .html 静态文件的，废了老半天劲才</p>
<p>发现。气死我了希望大家别踩我这坑了！（自动创建后有一个 hello_world.md 文件的，但我这人强迫症发作把它</p>
<p>删了😀）</p>
]]></content>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>Event Loop</title>
    <url>/2020/05/20/EventLoop/</url>
    <content><![CDATA[<h1 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h1><p>Event Loop 是为了 JS 进行异步操作时避免发生阻塞而设计的事件机制。</p>
<ul>
<li><p>JS 是单线程语言，所以同一时间只能做一件事</p>
</li>
<li><p>如果进行异步操作，没有 Event loop 机制程序会一直等着完成异步操作而发生阻塞</p>
</li>
<li><p>异步操作：Promise、setTimeout、setInterval</p>
</li>
<li><p>可以使用 H5 的 Web Worker 进行多线程操作，但是流行</p>
</li>
</ul>
<p>机制</p>
<ul>
<li><p>简言之就是 JS 只有一个主线程，主线程执行完执行栈的任务后去检查异步的任务队列，如果异步事件触发，则将其加到主线程的执行栈。</p>
</li>
<li><p>异步操作会放入异步的任务队列</p>
</li>
<li><p>异步操作又被分为 <code>宏任务</code> 和 <code>微任务</code> 来执行</p>
</li>
</ul>
<p>任务队列</p>
<ul>
<li>宏任务：<code>setInterval</code>、<code>setTimeout</code></li>
<li>微任务：<code>new Promise</code>、<code>MutaionObserver</code></li>
</ul>
<p>执行规则</p>
<ul>
<li><p>主线程同步操作 =&gt; 微任务 =&gt; 宏任务</p>
</li>
<li><p>第一步执行主线程的同步操作，第二步如果有微任务放入主线程执行没有的话去查看宏任务，最后当主线程和微任务检查和执行完毕后把宏任务放到主线程执行</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>redux, react-redux</title>
    <url>/2020/05/07/redux/</url>
    <content><![CDATA[<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><ul>
<li><p>全局状态管理模块</p>
</li>
<li><p>管理组件之间传递的数据</p>
</li>
</ul>
<p><strong>三个重要部分</strong></p>
<ul>
<li><p><code>action</code></p>
</li>
<li><p><code>reducer</code>：进行状态修改</p>
</li>
<li><p><code>state(store)</code>：存储数据的地方</p>
</li>
</ul>
<blockquote>
<p>dispatch 是派发的事件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">import &#123; createStore &#125; from &#39;redux&#39;<br><br>&#x2F;&#x2F; reducer<br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>  return state<br>&#125;;<br><br>&#x2F;&#x2F; store<br>const store &#x3D; createStore(counterReducer);<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; 如果需要改变一个 reducer 的值，需要使用 dispatch 派发一个 action<br>&#x2F;&#x2F; action 需要两个参数<br>&#x2F;&#x2F; 1. type    需要使用 type 区分对 state 做什么操作<br>&#x2F;&#x2F; 2. payload 传递的数据<br><br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>  switch (action.type) &#123;<br>    case &#39;COUNT_ADD&#39;:<br>      return &#123;<br>        ...state, count: state.count + 1<br>      &#125;;<br>    case &#39;COUNT_REDUCE&#39;:<br>      return &#123;<br>        ...state, count: state.count - 1<br>      &#125;;<br>    default:<br>      return state;<br>  &#125;;<br>&#125;;<br><br>const store &#x3D; createStore(counterReducer);<br><br>store.dispatch(&#123;<br>  type: &#39;COUNT_ADD&#39;,<br>  payload: &#123;&#125;<br>&#125;);<br><br>store.dispatch(&#123;<br>  type: &#39;COUNT_REDUCE&#39;,<br>  payload: &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p><strong>使用 chrome 插件查看状态</strong></p>
<ul>
<li>Redux DevTools</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">const store &#x3D; createStore( <br>    counterReducer<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>使用多个 reducer</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F;使用 combineReducers<br>import &#123; createStore, combineReducers &#125; from &#39;redux&#39;<br><br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>  switch (action.type) &#123;<br>    case &#39;COUNT_ADD&#39;:<br>      return &#123;<br>        ...state, count: state.count + 1<br>      &#125;;<br>    case &#39;COUNT_REDUCE&#39;:<br>      return &#123;<br>        ...state, count: state.count - 1<br>      &#125;;<br>    default:<br>      return state;<br>  &#125;;<br>&#125;;<br><br>const postReducer &#x3D; (state &#x3D; &#123; list: [&#123; title: &#39;你好！&#39; &#125;] &#125;, action) &#x3D;&gt; &#123;<br>  switch (action.type) &#123;<br>    case &#39;LOAD_POST&#39;:<br>      return &#123;<br>        ...state, list: action.payload<br>      &#125;;<br>    default:<br>      return state<br>  &#125;;<br>&#125;;<br><br>&#x2F;&#x2F;通过 combineReducers 把多个 reducer 进行合并<br>const rootReducers &#x3D; combineReducers(&#123;<br>  counter: counterReducer,<br>  post: postReducer<br>&#125;);<br><br>const store &#x3D; createStore( <br>    rootReducers,<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>redux 的网络请求</strong></p>
<blockquote>
<p>json holder：网站，会提供在线的 API</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> redux 使用 redux-thunk 插件进行网络请求</span><br><span class="hljs-meta">$</span><span class="bash"> yarn add redux-thunk </span><br><span class="hljs-meta">$</span><span class="bash"> yarn add axios</span><br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; 导入需要的插件<br>import &#123; createStore, combineReducers, compose, applyMiddleware &#125; from &#39;redux&#39;<br>import &#123; get &#125; from &#39;axios&#39;<br>import thunk from &#39;redux-thunk&#39;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; 配置 store<br>const store &#x3D; createStore(<br>    rootReducers,<br>    compose(<br>        applyMiddleware(...[thunk])  &#x2F;&#x2F;需要使用的中间件数组<br>    ),<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">const getPostsRequest &#x3D; () &#x3D;&gt; &#123;<br>    return get(&#39;https:&#x2F;&#x2F;xxx.com&#x2F;posts&#39;);<br>&#125;;<br><br>store.dispatch(async (dispatch) &#x3D;&gt; &#123;<br>    const res &#x3D; await getPostsRequest();<br>    dispatch(&#123;<br>        type: &#39;LOAD_POST&#39;,<br>        payload: res.data<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>拆分代码，使其阅读更合理</strong></p>
<ul>
<li>在 src 文件夹下创建 actions 文件夹，把所有的 action 文件放在里面</li>
<li>在 src 文件夹下创建 reducers 文件夹，把所有的 reducer 文件放在里面</li>
<li>在 src 文件夹下创建 services 文件夹，把所有的关于网络请求得文件放在里面</li>
<li>在根目录下创建 store.js 文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;services&#x2F;post_api.js<br>import &#123; get &#125; from &#39;axios&#39;<br><br>export function getPosts() &#123;<br>    return get(&#39;https:&#x2F;&#x2F;xxx.com&#x2F;posts&#39;);<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;actions&#x2F;counter_action.js<br>export const countAddAction &#x3D; &#123;<br>    type: &#39;COUNT_ADD&#39;<br>&#125;<br><br>export const countReduceAction &#x3D; &#123;<br>    type: &#39;COUNT_REDUCE&#39;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;actions&#x2F;post_action.js<br>import &#123; getPosts &#125; from &#39;..&#x2F;services&#x2F;post_api&#39;<br><br>export const loadPostsAction &#x3D; async (dispatch) &#x3D;&gt; &#123;<br>    const res &#x3D; await getPosts();<br>    dispatch(&#123;<br>        type: &#39;LOAD_POSTS&#39;,<br>        payload: res.data<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;reducers&#x2F;post_reducer.js<br>const postReducer &#x3D; (state &#x3D; &#123; list: [&#123; id: 1, title: &#39;你好！&#39; &#125;] &#125;, action) &#x3D;&gt; &#123;<br>    switch (action.type) &#123;<br>        case &#39;LOAD_POST&#39;:<br>            return &#123;<br>                ...state, list: action.payload<br>            &#125;;<br>        default:<br>            return state<br>    &#125;;<br>&#125;;<br><br>export default postReducer;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;reducers&#x2F;counter_reducer.js<br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>    switch (action.type) &#123;<br>        case &#39;COUNT_ADD&#39;:<br>            return &#123;<br>                ...state, count: state.count + 1<br>            &#125;;<br>        case &#39;COUNT_REDUCE&#39;:<br>            return &#123;<br>                ...state, count: state.count - 1<br>            &#125;;<br>        default:<br>            return state;<br>    &#125;;<br>&#125;;<br><br>export default counterReducer;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;reducers&#x2F;index.js<br>&#x2F;&#x2F;合并 reducer<br>import &#123; combineReducers &#125; from &#39;redux&#39;<br><br>import counterReducer from &#39;.&#x2F;counter_reducer&#39;<br>import postReducer from &#39;.&#x2F;post_reducer&#39;<br><br>const rootReducers &#x3D; combineReducers(&#123;<br>    counter: counterReducer,<br>    post: postReducer<br>&#125;);<br><br>export default rootReducers;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;store.js<br>&#x2F;&#x2F;合并 store<br><br>import &#123; createStore, compose, applyMiddleware &#125; from &#39;redux&#39;<br>import thunk from &#39;redux-thunk&#39;<br><br>import rootReducers from &#39;.&#x2F;reducers&#x2F;index&#39;<br><br>const store &#x3D; createStore(<br>    rootReducers,<br>    compose(<br>        applyMiddleware(...[thunk])<br>    ),<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br><br>export default store;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F;引用 store<br>import store from &#39;.&#x2F;store&#39;<br><br>&#x2F;&#x2F;操作<br>import &#123; countAddAction &#125; from &#39;.&#x2F;actions&#x2F;counter_action&#39;<br>import &#123; loadPostsAction &#125; from &#39;.&#x2F;actions&#x2F;post_action&#39;<br><br>store.dispatch(countAddAction);<br>store.dispatch(loadPostsAction);<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="在-react-使用-redux"><a href="#在-react-使用-redux" class="headerlink" title="在 react 使用 redux"></a>在 react 使用 redux</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 需要安装插件</span><br><span class="hljs-meta">$</span><span class="bash"> yarn add react-redux</span><br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">import React from &#39;react&#39;<br>import ReactDOM from &#39;react-dom&#39;<br>import &#123; Provider &#125; from &#39;react-redux&#39;<br><br>import App from &#39;.&#x2F;App&#39;<br><br>import store from &#39;.&#x2F;store&#39;<br><br>&#x2F;&#x2F; 使用 react-redux 的 Provider 元素把 &lt;App &#x2F;&gt; 包裹起来，这样所有的组件都可以使用 store 里面的数据<br>ReactDOM.render(&lt;Provider store&#x3D;&#123;store&#125;&gt;<br>    &lt;App &#x2F;&gt;<br>&lt;&#x2F;Provider&gt;, document.getElementById(&#39;root&#39;));<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F;使用 connect 组件根 redux 连接<br>import React, &#123; Component &#125; from &#39;react&#39;<br>import &#123; connect &#125; from &#39;react-redux&#39;<br>import &#123; loadPostsAction &#125; from &#39;..&#x2F;actions&#x2F;post_action&#39;<br><br>class PostList extends Component &#123;<br>    constructor(props) &#123;<br>        super(props);<br>        console.log(this.props);<br>    &#125;;<br>    componentDidMount() &#123;<br>        this.props.dispatch(loadPostsAction); &#x2F;&#x2F;加载远程数据<br>    &#125;;<br>    render() &#123;<br>        const &#123; list &#125; &#x3D; this.props.post;<br>        const Posts &#x3D; list.map(post&#x3D;&gt;&#123;<br>            return (&lt;li key&#x3D;&#123;post.id&#125;&gt;&#123;post.title&#125;&lt;&#x2F;li&gt;)<br>        &#125;)<br>        return (<br>            &lt; div &gt;<br>                &lt;ul&gt;&#123; Posts &#125;&lt;&#x2F;ul&gt;<br>            &lt;&#x2F;div &gt;<br>        );<br>    &#125;;<br>&#125;;<br><br>const mapStateToProps &#x3D; (state, ownProps) &#x3D;&gt; &#123;<br>    return &#123;<br>        post: state.post<br>    &#125;;<br>&#125;;<br><br>&#x2F;&#x2F; 通过 connect 连接组件和 redux 数据，传递 state 数据和 dispatch 方法<br>export default connect(mapStateToProps)(PostList);<br></code></pre></td></tr></table></figure>

<hr>
<p>##</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>git 基本指令</title>
    <url>/2020/05/04/git%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>提交文件</strong></p>
<p>初始化 Git <code>git init</code> </p>
<p>把修改和新增的文件提交到暂存区 <code>git add .</code></p>
<p>提交暂存区的文件到仓库 <code>git commit -m &quot;对提交的描述&quot;</code></p>
<p>查看文件状态 <code>git status</code>：</p>
<ul>
<li>红色：新建文件、文件内容被改动、文件被删除</li>
<li>绿色：在暂存区等待被 commit</li>
<li>working tree clean：已经 commit 或者文档没有被改动</li>
</ul>
<hr>
<p><strong>版本回退</strong></p>
<p>查看提交历史 <code>git log</code></p>
<p>查看命令历史 <code>git reflog</code></p>
<p>回退到上一个版本（就是上一次 commit 前的状态）<code>git reset --hard HEAD^</code></p>
<blockquote>
<p>^ 表示上一个版本，^^ 表示上上一个版本依次类推</p>
</blockquote>
<p>回退到上一个指定的版本 <code>git reset --hard commit_id</code></p>
<blockquote>
<p>commit_id：使用 git log 查看</p>
</blockquote>
<hr>
<p><strong>远程仓库</strong></p>
<blockquote>
<p>以 Github 为例，配置 Github <a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416" target="_blank" rel="noopener">廖雪峰 Git 教程</a></p>
</blockquote>
<p>配置密钥创建远程仓库后，关联远程仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git remote add origin git@你的 github 地址/仓库名.git<br></code></pre></td></tr></table></figure>

<p>推送到远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git push -u origin master<br></code></pre></td></tr></table></figure>

<blockquote>
<p>以后想要推送到远程仓库只要 <code>git commit -m &quot;msg&quot;</code> 后 <code>git push</code> 就可以</p>
</blockquote>
<p>克隆仓库文件到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git@github.com:xxx/xxx.git<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>分支操作</strong></p>
<blockquote>
<p>master 是主分支，公司一般用于上线项目。而平常提交代码一般会在另外新建分支进行提交</p>
</blockquote>
<p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<hr>
<p><strong>标签管理</strong></p>
<p>命令<code>git tag &lt;tagname&gt;</code> 用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</p>
<p>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p>
<p>命令<code>git tag</code>可以查看所有标签。</p>
<p>操作标签：</p>
<ul>
<li>命令<code>git push origin</code>可以推送一个本地标签；</li>
<li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>
<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li>
<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li>
</ul>
<hr>
<blockquote>
<p>详细内容 <a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰 Git 教程</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>计算机软件</tag>
      </tags>
  </entry>
</search>
