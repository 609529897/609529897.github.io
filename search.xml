<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端 Cache</title>
    <url>/2020/05/30/Cache/</url>
    <content><![CDATA[<h2 id="前端缓存-后端缓存"><a href="#前端缓存-后端缓存" class="headerlink" title="前端缓存/后端缓存"></a>前端缓存/后端缓存</h2><p>基本的网络请求分为三个步骤 <code>请求</code>、<code>处理</code>、<code>响应</code>。</p>
<p>而后端缓存主要集中在 <code>处理</code> 步骤，通过保留数据库连接或者保存处理结果来缩短处理时间尽快进入“响应”步骤。</p>
<p>而前端缓存那就集中在 <code>请求</code> 和 <code>响应</code> 步骤，响应需要跟后端共同配合。浏览器可以通过存储结果的方式省去发送</p>
<p>请求的步骤，响应阶段可以减少响应内容来缩短传输时间。</p>
<p><strong>缓存的分类</strong></p>
<p>按缓存位置：</p>
<ul>
<li>memory cache  内存缓存</li>
<li>disk cache          硬盘缓存</li>
<li>Service Worker  Cache Storage</li>
</ul>
<p>按失效策略：</p>
<ul>
<li>强缓存                  Cache-Control, Expires</li>
<li>协商缓存               Last-Modified &amp; If-Modified-Since, Etag &amp; If-None-Match</li>
</ul>
<p>Cache-Control 常用的值</p>
<ul>
<li><code>max-age</code>：即最大有效时间</li>
<li><code>must-revalidate</code>：如果超过了 <code>max-age</code> 的时间，浏览器必须向服务器发送请求，验证资源是否还有效。</li>
<li><code>no-cache</code>：虽然字面意思是“不要缓存”，但实际上还是要求客户端缓存内容的，只是是否使用这个内容由后续的对比来决定。</li>
<li><code>no-store</code>: 真正意义上的“不要缓存”。所有内容都不走缓存，包括强制和对比。</li>
<li><code>public</code>：所有的内容都可以被缓存 (包括客户端和代理服务器， 如 CDN)</li>
<li><code>private</code>：所有的内容只有客户端才可以缓存，代理服务器不能缓存。默认值。</li>
</ul>
<blockquote>
<p><strong>Cache-control 的优先级高于 Expires</strong>，为了兼容 HTTP/1.0 和 HTTP/1.1，实际项目中两个字段我们都会设置。</p>
</blockquote>
<p>当浏览器要请求资源时</p>
<ol>
<li><p>调用 Service Worker 的 <code>fetch</code> 事件响应</p>
</li>
<li><p>查看 memory cache</p>
</li>
<li><p>查看 disk cache。这里又细分：</p>
</li>
<li><ul>
<li>如果有强制缓存且未失效，则使用强制缓存，不请求服务器。这时的状态码全部是 200</li>
</ul>
</li>
<li><ul>
<li>如果有强制缓存但已失效，使用对比缓存，比较后确定 304 还是 200</li>
</ul>
</li>
<li><p>发送网络请求，等待网络响应</p>
</li>
<li><p>把响应内容存入 disk cache (如果 HTTP 头信息配置可以存的话)</p>
</li>
<li><p>把响应内容 <strong>的引用</strong> 存入 memory cache (无视 HTTP 头信息的配置)</p>
</li>
<li><p>把响应内容存入 Service Worker 的 Cache Storage (如果 Service Worker 的脚本调用了 <code>cache.put()</code>)</p>
</li>
</ol>
<blockquote>
<p>原文：<a href="https://zhuanlan.zhihu.com/p/44789005" target="_blank" rel="noopener">小蘑菇哥哥</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 事件订阅模式实现</title>
    <url>/2020/05/25/EventFuc/</url>
    <content><![CDATA[<p><strong>事件订阅模式</strong></p>
<p>你从淘宝上选购了一件衣服，但是你穿的尺码刚好断货，店员向你保证会上货。这时你对店员说当这件衣服有我尺码的时候给我发送信息（订阅 listen）。过了几天新货上架，店员通知了所有的订阅的用户新货上架了（发布trigger）。这就是事件订阅的逻辑了，当然你也可以取消订阅（取消订阅 remove）。下面代码是事件订阅模式的简单JS实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> Event = &#123;<br>    <span class="hljs-comment">// 存储订阅信息</span><br>    list: &#123;&#125;,<br>    <span class="hljs-comment">// 订阅</span><br>    listen: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key, fn</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.list[key]) &#123;<br>            <span class="hljs-keyword">this</span>.list[key] = []<br>        &#125;<br>        <span class="hljs-keyword">this</span>.list[key].push(fn)<br>    &#125;,<br>    <span class="hljs-comment">// 发布</span><br>    trigger: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> key = <span class="hljs-built_in">Array</span>.prototype.shift.call(<span class="hljs-built_in">arguments</span>)<br>        <span class="hljs-keyword">let</span> fns = <span class="hljs-keyword">this</span>.list[key]<br>        <span class="hljs-keyword">if</span> (!fns || fns.length === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, fn; fn = <span class="hljs-keyword">this</span>.list[i++];) &#123;<br>            fn.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>)<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 取消订阅</span><br>    remove: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key, fn</span>) </span>&#123;<br>        fns = <span class="hljs-keyword">this</span>.list[key]<br>        <span class="hljs-keyword">if</span> (!fns) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> &#125;<br>        <span class="hljs-comment">// 没有指定对象，默认全取消</span><br>        <span class="hljs-keyword">if</span> (!fn) &#123;<br>            fns &amp;&amp; (fns.length = <span class="hljs-number">0</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = fns.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> ;i--) &#123;<br>                <span class="hljs-keyword">if</span> (fns[i] === fn) &#123;<br>                    fns.splice(i, <span class="hljs-number">1</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 给普通对象添加以上方法</span><br>    addEvent: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> Event) &#123;<br>            obj[i] = Event[i]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<p>Ajax 请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 传统写法，代码就非常耦合</span><br>$.ajax(<span class="hljs-string">'http://127.0.0.1/index.php'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>    rendedData(data);  <span class="hljs-comment">// 渲染数据</span><br>    doAnimate(data);  <span class="hljs-comment">// 实现动画 </span><br>&#125;);<br></code></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 事件订阅模式，实现代码的分离</span><br>$.ajax(“http:<span class="hljs-comment">//127.0.0.1/index.php”,function(data)&#123;</span><br>    Obj.trigger(<span class="hljs-string">'success'</span>,data);  <span class="hljs-comment">// 发布请求成功后的消息</span><br>&#125;);<br><span class="hljs-comment">// 下面我们来订阅此消息，比如我现在订阅渲染数据这个消息；</span><br>Obj.listen(<span class="hljs-string">'success'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>   renderData(data);<br>&#125;);<br><span class="hljs-comment">// 订阅动画这个消息</span><br>Obj.listen(<span class="hljs-string">'success'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>   doAnimate(data); <br>&#125;);<br></code></pre></td></tr></table></figure>

<p>模块间通信</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--订阅模式模块--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"global.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"count"</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"showcount"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">"a.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">"b.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// a.js</span><br><span class="hljs-keyword">let</span> a = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> button = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"count"</span>);<br>    button.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        Event.trigger(<span class="hljs-string">"add"</span>,count++);<br>    &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// b.js</span><br><span class="hljs-keyword">let</span> b = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"showcount"</span>);<br>    Event.listen(<span class="hljs-string">'add'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">count</span>)</span>&#123;<br>        div.innerHTML = count;<br>    &#125;);<br>&#125;)();<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>垂直水平居中</title>
    <url>/2020/07/04/Center/</url>
    <content><![CDATA[<ol>
<li>使用 <code>flex</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">background</span>: red;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span> &gt; <span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">background</span>: blue;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>使用 <code>position</code>，<code>margin: auto;</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">background</span>: red;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span> &gt; <span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">background</span>: blue;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>使用 <code>position</code>，<code>margin</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">background</span>: red;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span> &gt; <span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">background</span>: blue;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-comment">/*50px 是自己宽和高的一半距离*/</span><br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">50px</span>; <br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="4">
<li>使用 <code>position</code>，<code>transform: translate()</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>    <span class="hljs-attribute">background</span>: red;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.wrapper</span> &gt; <span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">background</span>: blue;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-comment">/*translate 相对自己向左向上移动自己宽高的 50% 的距离*/</span><br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Event Loop</title>
    <url>/2020/05/20/EventLoop/</url>
    <content><![CDATA[<p>Event Loop 是为了 JS 进行异步操作时避免发生阻塞而设计的事件机制。</p>
<ul>
<li><p>JS 是单线程语言，所以同一时间只能做一件事</p>
</li>
<li><p>如果进行异步操作，没有 Event loop 机制程序会一直等着完成异步操作而发生阻塞</p>
</li>
<li><p>异步操作：Promise、setTimeout、setInterval</p>
</li>
<li><p>可以使用 H5 的 Web Worker 进行多线程操作，但是流行</p>
</li>
</ul>
<p>机制</p>
<ul>
<li><p>简言之就是 JS 只有一个主线程，主线程执行完执行栈的任务后去检查异步的任务队列，如果异步事件触发，则将其加到主线程的执行栈。</p>
</li>
<li><p>异步操作会放入异步的任务队列</p>
</li>
<li><p>异步操作又被分为 <code>宏任务</code> 和 <code>微任务</code> 来执行</p>
</li>
</ul>
<p>任务队列</p>
<ul>
<li>宏任务：<code>setInterval</code>、<code>setTimeout</code></li>
<li>微任务：<code>new Promise</code>、<code>MutaionObserver</code></li>
</ul>
<p>执行规则</p>
<ul>
<li><p>主线程同步操作 =&gt; 微任务 =&gt; 宏任务</p>
</li>
<li><p>第一步执行主线程的同步操作，第二步如果有微任务放入主线程执行没有的话去查看宏任务，最后当主线程和微任务检查和执行完毕后把宏任务放到主线程执行</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>aa</title>
    <url>/2020/07/08/aa/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>React 组件通信</title>
    <url>/2020/06/19/TX/</url>
    <content><![CDATA[<p>四种情况：</p>
<ol>
<li>父组件到子组件</li>
<li>子组件到父组件</li>
<li>跨级组件</li>
<li>非嵌套组件</li>
</ol>
<h2 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h2><p>通过 props 传递数据</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Parent = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br> <span class="hljs-keyword">return</span> (<br>     &lt;Child value=<span class="hljs-string">"儿子您好！"</span> /&gt;<br> )   <br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Child = <span class="hljs-function">(<span class="hljs-params">&#123; value &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;&#123; value &#125;&lt;<span class="hljs-regexp">/div&gt;</span><br><span class="hljs-regexp">    )</span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure>

<hr>
<h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h2><p>使用回调函数的形式</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Parent = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br> <span class="hljs-keyword">const</span> getChildValue = <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>     <span class="hljs-built_in">console</span>.log(val) <span class="hljs-comment">// false</span><br> &#125;<br> <span class="hljs-keyword">return</span> (<br>     &lt;Child getChildValue = &#123; getChildValue &#125; /&gt;<br> )   <br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Child = <span class="hljs-function">(<span class="hljs-params">&#123; getChildValue &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> [ val, setVal ] = useState(<span class="hljs-literal">false</span>)<br>    <span class="hljs-keyword">const</span> check = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        getChildValue(val)<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;button onClick=&#123; check &#125;&gt;Check it!&lt;<span class="hljs-regexp">/button&gt;</span><br><span class="hljs-regexp">    )</span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure>

<p>使用 ref</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Parent = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br> <span class="hljs-keyword">const</span> getChildValue = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>     <span class="hljs-comment">// 获得子组件 state 的 msg 属性值</span><br>     <span class="hljs-keyword">this</span>.refs.getChildValue.state.msg<br> &#125;<br> <span class="hljs-keyword">return</span> (<br>     &lt;&gt;<br>     &lt;button onClick=&#123;getChildValue&#125;&gt;&lt;<span class="hljs-regexp">/button&gt;</span><br><span class="hljs-regexp">     &lt;Child ref="children" /</span>&gt;<br>     &lt;<span class="hljs-regexp">/&gt;</span><br><span class="hljs-regexp"> )   </span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure>

<hr>
<h2 id="跨组件传值"><a href="#跨组件传值" class="headerlink" title="跨组件传值"></a>跨组件传值</h2><p>使用 context</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// Provider 生产者，Consumer 消费者，defaultValue 默认共享数据</span><br><span class="hljs-keyword">const</span> &#123; Provider, Consumer &#125; = React.createContext(defaultValue);<br></code></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;Provider value=&#123;<span class="hljs-string">'共享的数据'</span>&#125;&gt;<br>    &lt;Son /&gt;<br>&lt;<span class="hljs-regexp">/Provider&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 消费者需要嵌套在生产者里面</span><br>&lt;Consumer&gt;<br>    &#123; value =&gt; value.split(<span class="hljs-string">''</span>) <span class="hljs-comment">/*[共，享，的，数，据]*/</span> &#125;<br>    &lt;Grandson /&gt;<br>&lt;<span class="hljs-regexp">/Consumer&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;Consumer&gt;<br>    &#123; value =&gt; &#123;<span class="hljs-comment">/*共享的数据*/</span>&#125; &#125;<br>&lt;<span class="hljs-regexp">/Consumer&gt;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>如果子组件消费或者改变值，孙子组件接收到的值是否准确</p>
</blockquote>
<hr>
<h2 id="没有嵌套关系"><a href="#没有嵌套关系" class="headerlink" title="没有嵌套关系"></a>没有嵌套关系</h2><p>兄弟组件：如果有共同的父组件，第一个子组件先传值到父组件，父组件保存后把值传到需要数据的第二个子组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Parent = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> [Son1Val, setSon1Val] = useState(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">const</span> getSonVal = <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>        setSon1Val(val)<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &lt;Son1 getSonVal=&#123;getSonVal&#125; /&gt;<br>      &lt;Son2 Son1Val=&#123;Son1Val&#125;/&gt;    <br>    &lt;<span class="hljs-regexp">/&gt;</span><br><span class="hljs-regexp">    )</span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Son1 = <span class="hljs-function">(<span class="hljs-params">&#123; getSonVal &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> pushVal = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        getSonVal(<span class="hljs-number">666</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &lt;button onClick=&#123;pushVal&#125;&gt;&lt;<span class="hljs-regexp">/button&gt; </span><br><span class="hljs-regexp">    &lt;/</span>&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Son2 = <span class="hljs-function">(<span class="hljs-params">&#123; Son1Val &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &#123; Son1Val &#125; &#123;<span class="hljs-comment">/*666*/</span>&#125; <br>    &lt;<span class="hljs-regexp">/&gt;</span><br><span class="hljs-regexp">    )</span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure>

<hr>
<p>发布者-订阅者模式</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 简易的观察者模式</span><br><span class="hljs-keyword">let</span> observer = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> listeners = [];<br>    <span class="hljs-comment">// 添加事件订阅</span><br>    <span class="hljs-keyword">const</span> subscribe = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name, listener</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!listeners[name]) &#123;<br>            listeners[name] = [];<br>        &#125;<br>        listeners[name].push(listener);<br>        <span class="hljs-comment">// 返回移除订阅的方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> index = listeners[name].indexOf(listener);<br>            listeners[name].splice(index, <span class="hljs-number">1</span>);<br>        &#125;;<br>    &#125;;<br><br>    <span class="hljs-comment">// 通知事件队列</span><br>    <span class="hljs-keyword">const</span> notify = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name, ...args</span>) </span>&#123;<br>        (listeners[name] || []).map(<span class="hljs-function">(<span class="hljs-params">listener</span>) =&gt;</span> &#123;<br>            listener.call(...args);<br>        &#125;);<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        subscribe,<br>        notify<br>    &#125;;<br>&#125;;<br><br><span class="hljs-comment">// 目标组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-keyword">constructor</span> (props) &#123;<br>        <span class="hljs-keyword">super</span>(props);<br>        <span class="hljs-keyword">this</span>.state = &#123;<br>            count: <span class="hljs-number">0</span><br>        &#125;;<br>    &#125;<br><br>    componentDidMount () &#123;<br>        <span class="hljs-comment">// 添加订阅，名字为level的订阅</span><br>        <span class="hljs-keyword">this</span>.unsubscribe = cooStore.subscribe(<span class="hljs-string">'level'</span>, <span class="hljs-keyword">this</span>.setCount.bind(<span class="hljs-keyword">this</span>));<br>    &#125;<br><br>    componentWillUnmount () &#123;<br>        <span class="hljs-comment">// 删除订阅</span><br>        <span class="hljs-keyword">this</span>.unsubscribe();<br>    &#125;<br><br>    setCount () &#123;<br>        <span class="hljs-keyword">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                count: prevState.count + <span class="hljs-number">1</span><br>            &#125;;<br>        &#125;);<br>    &#125;<br><br>    render () &#123;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div className=<span class="hljs-string">"level"</span>&gt;<br>                  按钮点击了【&#123;<span class="hljs-keyword">this</span>.state.count&#125;】次<br>            &lt;<span class="hljs-regexp">/div&gt;</span><br><span class="hljs-regexp">        );</span><br><span class="hljs-regexp">    &#125;</span><br><span class="hljs-regexp">&#125;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/ 源组件触发通知</span><br><span class="hljs-regexp">class ChildB extends Component &#123;</span><br><span class="hljs-regexp">    constructor (props) &#123;</span><br><span class="hljs-regexp">        super(props);</span><br><span class="hljs-regexp">        this.state = &#123;</span><br><span class="hljs-regexp">        &#125;;</span><br><span class="hljs-regexp">    &#125;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">    notify () &#123;</span><br><span class="hljs-regexp">        /</span><span class="hljs-regexp">/ 发送通知，名字为level的通知</span><br><span class="hljs-regexp">        cooStore.notify('level');</span><br><span class="hljs-regexp">    &#125;</span><br><span class="hljs-regexp">    render () &#123;</span><br><span class="hljs-regexp">        return (</span><br><span class="hljs-regexp">            &lt;div className="level"&gt;</span><br><span class="hljs-regexp">                &lt;button onClick=&#123;this.notify.bind(this)&#125;&gt;通知&lt;/</span>button&gt;<br>            &lt;<span class="hljs-regexp">/div&gt;</span><br><span class="hljs-regexp">        );</span><br><span class="hljs-regexp">    &#125;</span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域</title>
    <url>/2020/07/05/cross-domain/</url>
    <content><![CDATA[<blockquote>
<p>跨域是不可能靠前端单方面解决的，不管是怎么解决，都需要服务端的支持</p>
</blockquote>
<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><blockquote>
<p><strong>同源策略</strong>限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p>
<p>————————《MDN web docs》</p>
</blockquote>
<p>那按照同源策略，不同源的是不能进行请求等操作的，那什么样的是同源，什么样的又不是同源呢（我想从事前端的小伙伴多多少少应该都应该知道）；<br>只要满足<strong>协议、主机、端口</strong>一致，则两个页面具有相同的源。</p>
<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>原理：利用 <code>src</code> 和 <code>href</code> 属性可以进行跨域请求的特性，动态添加 <code>script</code> 标签和回调函数实现跨域，只能用在 GET 请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSONP<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span><span class="hljs-params">(data)</span> </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`我叫<span class="hljs-subst">$&#123;data&#125;</span>`</span>);</span><br><span class="javascript">      <span class="hljs-keyword">let</span> jsonpScript = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">'jsonpScript'</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">      <span class="hljs-built_in">document</span>.body.removeChild(jsonpScript);</span><br>    &#125;<br><span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonpRequest</span><span class="hljs-params">(callback)</span> </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> jsonpScript = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>);</span><br><span class="javascript">      jsonpScript.src = <span class="hljs-string">`http://www.hello.com/jsonp/js/index.js?callback=<span class="hljs-subst">$&#123;callback&#125;</span>`</span>;</span><br><span class="actionscript">      jsonpScript.className = <span class="hljs-string">'jsonpScript'</span>;</span><br><span class="javascript">      <span class="hljs-built_in">document</span>.body.appendChild(jsonpScript);</span><br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"jsonpRequest('print')"</span>&gt;</span>发个JSONP请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// jsonp/js/index.js</span><br>print(&#123;<br>    name: <span class="hljs-string">'jerry'</span>,<br>  &#125;)<br></code></pre></td></tr></table></figure>

<hr>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS 方法的全称是 Cross-origin resource sharing，中文名叫“跨域资源共享”。</p>
<p><strong>简单请求</strong></p>
<p>简单请求的几个条件：</p>
<ol>
<li>请求方法为 HEAD、GET 或者 POST 中的一种</li>
<li>HTTP的头信息不超过以下几种字段<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>Last-Event-ID</code></li>
<li><code>Content-Type</code>的值只限于<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code>三个  </li>
</ol>
<p>从浏览器发出请求的时候，浏览器会自动在请求头中添加一个字段 <code>Origin：源地址</code> ，服务端根据这个值，决定是否同意这次请求，如果<code>Origin</code>的值不在指定的许可范围，服务端返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段，就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。 如果Access-Control-Allow-Origin字段正好跟带过去的<code>Origin</code>的值一样，则返回对应的数据，完成一次请求。。</p>
<p><strong>非简单请求以及<code>option</code>请求</strong></p>
<p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。在进行非简单请求之前，浏览器会在正式请求之前发送一次预检请求，这就是有时候我们会在控制台中看到的<code>option</code>请求，就是说，正式请求之前，浏览器会去问服务端我这个地址能不能访问你，如果可以，浏览器才会发送正式的请求，否则报错。</p>
<p><strong>总结</strong></p>
<p>总的来说，CORS实现跨域的方法就是根据请求头的<code>Origin</code>值和响应头的<code>Access-Control-Request-Headers</code>和<code>Access-Control-Request-Method</code>的值进行比对，通过了就可以请求成功，没通过就请求失败。</p>
<hr>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>原理：同源策略只适用于客户端向服务端发送请求，而代理模式是服务端向服务端发送请求</p>
<p><strong>node 反向代理</strong></p>
<p>如果我们用的是node起的前端服务，那我们可以使用node来直接进行反向代理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http-proxy-middleware'</span>);<span class="hljs-comment">//1.0.0版本前都是用proxy,1.0.0后使用porxy会报错,应使用createProxyMiddleware;</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">app</span>) </span>&#123;<br>  app.use(<br>    createProxyMiddleware(<br>      <span class="hljs-string">'/api'</span>,<br>      &#123;<br>        target: <span class="hljs-string">'http://v.juhe.cn'</span>,<br>        pathRewrite: &#123; <span class="hljs-string">'^/api'</span>: <span class="hljs-string">''</span> &#125;,<br>        changeOrigin: <span class="hljs-literal">true</span>,     <span class="hljs-comment">// target是域名的话，需要这个参数，</span><br>        secure: <span class="hljs-literal">false</span>,<br>      &#125;<br>    )<br>&#125;;<br></code></pre></td></tr></table></figure>

<p><strong>nginx 反向代理</strong></p>
<p>…</p>
<p><strong>正向代理 / 反向代理</strong></p>
<p>正向代理，清楚的知道是那个服务器返回的数据</p>
<p>反向代理，不清楚是那个服务器返回的数据，因为数据是从多个服务器获取的</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 比较对象是否相等</title>
    <url>/2020/05/24/deepEqualFunc/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> deepEqual = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (x === y) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">"object"</span> &amp;&amp; x != <span class="hljs-literal">null</span>) &amp;&amp; (<span class="hljs-keyword">typeof</span> y === <span class="hljs-string">"object"</span> &amp;&amp; y != <span class="hljs-literal">null</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.keys(x).length != <span class="hljs-built_in">Object</span>.keys(y).length) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> prop <span class="hljs-keyword">in</span> x) &#123;<br>      <span class="hljs-keyword">if</span> (y.hasOwnProperty(prop)) &#123;<br>        <span class="hljs-keyword">if</span> (!deepEqual(x[prop], y[prop])) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>git 基本指令</title>
    <url>/2020/05/04/git%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>提交文件</strong></p>
<p>初始化 Git <code>git init</code> </p>
<p>把修改和新增的文件提交到暂存区 <code>git add .</code></p>
<p>提交暂存区的文件到仓库 <code>git commit -m &quot;对提交的描述&quot;</code></p>
<p>查看文件状态 <code>git status</code>：</p>
<ul>
<li>红色：新建文件、文件内容被改动、文件被删除</li>
<li>绿色：在暂存区等待被 commit</li>
<li>working tree clean：已经 commit 或者文档没有被改动</li>
</ul>
<hr>
<p><strong>版本回退</strong></p>
<p>查看提交历史 <code>git log</code></p>
<p>查看命令历史 <code>git reflog</code></p>
<p>回退到上一个版本（就是上一次 commit 前的状态）<code>git reset --hard HEAD^</code></p>
<blockquote>
<p>^ 表示上一个版本，^^ 表示上上一个版本依次类推</p>
</blockquote>
<p>回退到上一个指定的版本 <code>git reset --hard commit_id</code></p>
<blockquote>
<p>commit_id：使用 git log 查看</p>
</blockquote>
<hr>
<p><strong>远程仓库</strong></p>
<blockquote>
<p>以 Github 为例，配置 Github <a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416" target="_blank" rel="noopener">廖雪峰 Git 教程</a></p>
</blockquote>
<p>配置密钥创建远程仓库后，关联远程仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git remote add origin git@你的 github 地址/仓库名.git<br></code></pre></td></tr></table></figure>

<p>推送到远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git push -u origin master<br></code></pre></td></tr></table></figure>

<blockquote>
<p>以后想要推送到远程仓库只要 <code>git commit -m &quot;msg&quot;</code> 后 <code>git push</code> 就可以</p>
</blockquote>
<p>克隆仓库文件到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git@github.com:xxx/xxx.git<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>分支操作</strong></p>
<blockquote>
<p>master 是主分支，公司一般用于上线项目。而平常提交代码一般会在另外新建分支进行提交</p>
</blockquote>
<p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<hr>
<p><strong>标签管理</strong></p>
<p>命令<code>git tag &lt;tagname&gt;</code> 用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</p>
<p>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p>
<p>命令<code>git tag</code>可以查看所有标签。</p>
<p>操作标签：</p>
<ul>
<li>命令<code>git push origin</code>可以推送一个本地标签；</li>
<li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>
<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li>
<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li>
</ul>
<hr>
<blockquote>
<p>详细内容 <a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰 Git 教程</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>软件工具</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 创建博客踩的坑</title>
    <url>/2020/05/03/hexo%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>​        第一次写博客那就吐槽一下用 hexo 创建博客踩的坑吧</p>
<p>​        这尼玛如果在 source/_posts 目录下没有 .md 文件是不能 <code>hexo g</code> 创建 .html 静态文件的，废了老半天劲才</p>
<p>发现。气死我了希望大家别踩我这坑了！（自动创建后有一个 hello_world.md 文件的，但我这人强迫症发作把它</p>
<p>删了😀）</p>
]]></content>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个简单的 Redux</title>
    <url>/2020/06/25/redux%20%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> createStore = <span class="hljs-function">(<span class="hljs-params">reducer</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> state, <span class="hljs-comment">// Where we store the state of whole application  </span><br>      listeners = [] <span class="hljs-comment">// Store all subscribed callback function</span><br><br>  <span class="hljs-keyword">const</span> getState = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> state<br><br>  <span class="hljs-keyword">const</span> disptach = <span class="hljs-function"><span class="hljs-params">action</span> =&gt;</span> &#123;<br>      state = reducer(state, action)<br>      listeners.forEach(<span class="hljs-function"><span class="hljs-params">l</span> =&gt;</span> l())<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> subscribe = <span class="hljs-function"><span class="hljs-params">listener</span> =&gt;</span> &#123;<br>    listeners.push(listener)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>      listeners = listeners.filter(<span class="hljs-function"><span class="hljs-params">l</span> =&gt;</span> l !== listener)<br>    &#125;<br>  &#125;<br><br>  dispatch(&#123;&#125;) <span class="hljs-comment">// Just to get the reducer to return the initial value.  </span><br>  <span class="hljs-keyword">return</span> &#123; getState, dispatch, subscribe &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>redux, react-redux</title>
    <url>/2020/05/07/redux/</url>
    <content><![CDATA[<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><ul>
<li><p>全局状态管理模块</p>
</li>
<li><p>管理组件之间传递的数据</p>
</li>
</ul>
<p><strong>三个重要部分</strong></p>
<ul>
<li><p><code>action</code></p>
</li>
<li><p><code>reducer</code>：进行状态修改</p>
</li>
<li><p><code>state(store)</code>：存储数据的地方</p>
</li>
</ul>
<blockquote>
<p>dispatch 是派发的事件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">import &#123; createStore &#125; from &#39;redux&#39;<br><br>&#x2F;&#x2F; reducer<br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>  return state<br>&#125;;<br><br>&#x2F;&#x2F; store<br>const store &#x3D; createStore(counterReducer);<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; 如果需要改变一个 reducer 的值，需要使用 dispatch 派发一个 action<br>&#x2F;&#x2F; action 需要两个参数<br>&#x2F;&#x2F; 1. type    需要使用 type 区分对 state 做什么操作<br>&#x2F;&#x2F; 2. payload 传递的数据<br><br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>  switch (action.type) &#123;<br>    case &#39;COUNT_ADD&#39;:<br>      return &#123;<br>        ...state, count: state.count + 1<br>      &#125;;<br>    case &#39;COUNT_REDUCE&#39;:<br>      return &#123;<br>        ...state, count: state.count - 1<br>      &#125;;<br>    default:<br>      return state;<br>  &#125;;<br>&#125;;<br><br>const store &#x3D; createStore(counterReducer);<br><br>store.dispatch(&#123;<br>  type: &#39;COUNT_ADD&#39;,<br>  payload: &#123;&#125;<br>&#125;);<br><br>store.dispatch(&#123;<br>  type: &#39;COUNT_REDUCE&#39;,<br>  payload: &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p><strong>使用 chrome 插件查看状态</strong></p>
<ul>
<li>Redux DevTools</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">const store &#x3D; createStore( <br>    counterReducer<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>使用多个 reducer</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F;使用 combineReducers<br>import &#123; createStore, combineReducers &#125; from &#39;redux&#39;<br><br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>  switch (action.type) &#123;<br>    case &#39;COUNT_ADD&#39;:<br>      return &#123;<br>        ...state, count: state.count + 1<br>      &#125;;<br>    case &#39;COUNT_REDUCE&#39;:<br>      return &#123;<br>        ...state, count: state.count - 1<br>      &#125;;<br>    default:<br>      return state;<br>  &#125;;<br>&#125;;<br><br>const postReducer &#x3D; (state &#x3D; &#123; list: [&#123; title: &#39;你好！&#39; &#125;] &#125;, action) &#x3D;&gt; &#123;<br>  switch (action.type) &#123;<br>    case &#39;LOAD_POST&#39;:<br>      return &#123;<br>        ...state, list: action.payload<br>      &#125;;<br>    default:<br>      return state<br>  &#125;;<br>&#125;;<br><br>&#x2F;&#x2F;通过 combineReducers 把多个 reducer 进行合并<br>const rootReducers &#x3D; combineReducers(&#123;<br>  counter: counterReducer,<br>  post: postReducer<br>&#125;);<br><br>const store &#x3D; createStore( <br>    rootReducers,<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>redux 的网络请求</strong></p>
<blockquote>
<p>json holder：网站，会提供在线的 API</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> redux 使用 redux-thunk 插件进行网络请求</span><br><span class="hljs-meta">$</span><span class="bash"> yarn add redux-thunk </span><br><span class="hljs-meta">$</span><span class="bash"> yarn add axios</span><br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; 导入需要的插件<br>import &#123; createStore, combineReducers, compose, applyMiddleware &#125; from &#39;redux&#39;<br>import &#123; get &#125; from &#39;axios&#39;<br>import thunk from &#39;redux-thunk&#39;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; 配置 store<br>const store &#x3D; createStore(<br>    rootReducers,<br>    compose(<br>        applyMiddleware(...[thunk])  &#x2F;&#x2F;需要使用的中间件数组<br>    ),<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">const getPostsRequest &#x3D; () &#x3D;&gt; &#123;<br>    return get(&#39;https:&#x2F;&#x2F;xxx.com&#x2F;posts&#39;);<br>&#125;;<br><br>store.dispatch(async (dispatch) &#x3D;&gt; &#123;<br>    const res &#x3D; await getPostsRequest();<br>    dispatch(&#123;<br>        type: &#39;LOAD_POST&#39;,<br>        payload: res.data<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>

<hr>
<p><strong>拆分代码，使其阅读更合理</strong></p>
<ul>
<li>在 src 文件夹下创建 actions 文件夹，把所有的 action 文件放在里面</li>
<li>在 src 文件夹下创建 reducers 文件夹，把所有的 reducer 文件放在里面</li>
<li>在 src 文件夹下创建 services 文件夹，把所有的关于网络请求得文件放在里面</li>
<li>在根目录下创建 store.js 文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;services&#x2F;post_api.js<br>import &#123; get &#125; from &#39;axios&#39;<br><br>export function getPosts() &#123;<br>    return get(&#39;https:&#x2F;&#x2F;xxx.com&#x2F;posts&#39;);<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;actions&#x2F;counter_action.js<br>export const countAddAction &#x3D; &#123;<br>    type: &#39;COUNT_ADD&#39;<br>&#125;<br><br>export const countReduceAction &#x3D; &#123;<br>    type: &#39;COUNT_REDUCE&#39;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;actions&#x2F;post_action.js<br>import &#123; getPosts &#125; from &#39;..&#x2F;services&#x2F;post_api&#39;<br><br>export const loadPostsAction &#x3D; async (dispatch) &#x3D;&gt; &#123;<br>    const res &#x3D; await getPosts();<br>    dispatch(&#123;<br>        type: &#39;LOAD_POSTS&#39;,<br>        payload: res.data<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;reducers&#x2F;post_reducer.js<br>const postReducer &#x3D; (state &#x3D; &#123; list: [&#123; id: 1, title: &#39;你好！&#39; &#125;] &#125;, action) &#x3D;&gt; &#123;<br>    switch (action.type) &#123;<br>        case &#39;LOAD_POST&#39;:<br>            return &#123;<br>                ...state, list: action.payload<br>            &#125;;<br>        default:<br>            return state<br>    &#125;;<br>&#125;;<br><br>export default postReducer;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;reducers&#x2F;counter_reducer.js<br>const counterReducer &#x3D; (state &#x3D; &#123; count: 1 &#125;, action) &#x3D;&gt; &#123;<br>    switch (action.type) &#123;<br>        case &#39;COUNT_ADD&#39;:<br>            return &#123;<br>                ...state, count: state.count + 1<br>            &#125;;<br>        case &#39;COUNT_REDUCE&#39;:<br>            return &#123;<br>                ...state, count: state.count - 1<br>            &#125;;<br>        default:<br>            return state;<br>    &#125;;<br>&#125;;<br><br>export default counterReducer;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;reducers&#x2F;index.js<br>&#x2F;&#x2F;合并 reducer<br>import &#123; combineReducers &#125; from &#39;redux&#39;<br><br>import counterReducer from &#39;.&#x2F;counter_reducer&#39;<br>import postReducer from &#39;.&#x2F;post_reducer&#39;<br><br>const rootReducers &#x3D; combineReducers(&#123;<br>    counter: counterReducer,<br>    post: postReducer<br>&#125;);<br><br>export default rootReducers;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F; src&#x2F;store.js<br>&#x2F;&#x2F;合并 store<br><br>import &#123; createStore, compose, applyMiddleware &#125; from &#39;redux&#39;<br>import thunk from &#39;redux-thunk&#39;<br><br>import rootReducers from &#39;.&#x2F;reducers&#x2F;index&#39;<br><br>const store &#x3D; createStore(<br>    rootReducers,<br>    compose(<br>        applyMiddleware(...[thunk])<br>    ),<br>    window.__REDUX_DEVTOOLS_EXTENSION_ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()<br>);<br><br>export default store;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F;引用 store<br>import store from &#39;.&#x2F;store&#39;<br><br>&#x2F;&#x2F;操作<br>import &#123; countAddAction &#125; from &#39;.&#x2F;actions&#x2F;counter_action&#39;<br>import &#123; loadPostsAction &#125; from &#39;.&#x2F;actions&#x2F;post_action&#39;<br><br>store.dispatch(countAddAction);<br>store.dispatch(loadPostsAction);<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="在-react-使用-redux"><a href="#在-react-使用-redux" class="headerlink" title="在 react 使用 redux"></a>在 react 使用 redux</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 需要安装插件</span><br><span class="hljs-meta">$</span><span class="bash"> yarn add react-redux</span><br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">import React from &#39;react&#39;<br>import ReactDOM from &#39;react-dom&#39;<br>import &#123; Provider &#125; from &#39;react-redux&#39;<br><br>import App from &#39;.&#x2F;App&#39;<br><br>import store from &#39;.&#x2F;store&#39;<br><br>&#x2F;&#x2F; 使用 react-redux 的 Provider 元素把 &lt;App &#x2F;&gt; 包裹起来，这样所有的组件都可以使用 store 里面的数据<br>ReactDOM.render(&lt;Provider store&#x3D;&#123;store&#125;&gt;<br>    &lt;App &#x2F;&gt;<br>&lt;&#x2F;Provider&gt;, document.getElementById(&#39;root&#39;));<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs react">&#x2F;&#x2F;使用 connect 组件根 redux 连接<br>import React, &#123; Component &#125; from &#39;react&#39;<br>import &#123; connect &#125; from &#39;react-redux&#39;<br>import &#123; loadPostsAction &#125; from &#39;..&#x2F;actions&#x2F;post_action&#39;<br><br>class PostList extends Component &#123;<br>    constructor(props) &#123;<br>        super(props);<br>        console.log(this.props);<br>    &#125;;<br>    componentDidMount() &#123;<br>        this.props.dispatch(loadPostsAction); &#x2F;&#x2F;加载远程数据<br>    &#125;;<br>    render() &#123;<br>        const &#123; list &#125; &#x3D; this.props.post;<br>        const Posts &#x3D; list.map(post&#x3D;&gt;&#123;<br>            return (&lt;li key&#x3D;&#123;post.id&#125;&gt;&#123;post.title&#125;&lt;&#x2F;li&gt;)<br>        &#125;)<br>        return (<br>            &lt; div &gt;<br>                &lt;ul&gt;&#123; Posts &#125;&lt;&#x2F;ul&gt;<br>            &lt;&#x2F;div &gt;<br>        );<br>    &#125;;<br>&#125;;<br><br>const mapStateToProps &#x3D; (state, ownProps) &#x3D;&gt; &#123;<br>    return &#123;<br>        post: state.post<br>    &#125;;<br>&#125;;<br><br>&#x2F;&#x2F; 通过 connect 连接组件和 redux 数据，传递 state 数据和 dispatch 方法<br>export default connect(mapStateToProps)(PostList);<br></code></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>防抖，节流</title>
    <url>/2020/06/21/throttle-debounce/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="函数防抖（debounce）"><a href="#函数防抖（debounce）" class="headerlink" title="函数防抖（debounce）"></a>函数防抖（debounce）</h3><p>当一个动作连续触发，则只执行最后一次</p>
<h3 id="函数节流（throttle）"><a href="#函数节流（throttle）" class="headerlink" title="函数节流（throttle）"></a>函数节流（throttle）</h3><p>一个动作在一段时间内只能执行一次</p>
<h2 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h2><h3 id="函数防抖的应用场景"><a href="#函数防抖的应用场景" class="headerlink" title="函数防抖的应用场景"></a>函数防抖的应用场景</h3><p>连续的事件，只需触发一次回调的场景有：</p>
<ul>
<li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li>
<li>手机号、邮箱验证输入检测</li>
<li>窗口大小Resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li>
</ul>
<h3 id="函数节流的应用场景"><a href="#函数节流的应用场景" class="headerlink" title="函数节流的应用场景"></a>函数节流的应用场景</h3><p>间隔一段时间执行一次回调的场景有：</p>
<ul>
<li>滚动加载，加载更多或滚到底部监听</li>
<li>谷歌搜索框，搜索联想功能</li>
<li>高频点击提交，表单重复提交</li>
</ul>
<h2 id="实现原理及代码封装"><a href="#实现原理及代码封装" class="headerlink" title="实现原理及代码封装"></a>实现原理及代码封装</h2><p>以页面元素滚动监听的例子，来进行解析：</p>
<p><strong>函数节流：规定延迟时间（delay）内只执行最开始触发的函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 函数节流</span><br><span class="hljs-keyword">let</span> canRun = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'scroll'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 判断是否已空闲，如果在执行中，则直接return</span><br>    <span class="hljs-keyword">if</span>(!canRun) <span class="hljs-keyword">return</span>;<br>    canRun = <span class="hljs-literal">false</span>;<br>    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"函数节流"</span>);<br>        canRun = <span class="hljs-literal">true</span>;<br>    &#125;, <span class="hljs-number">300</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>

<p><strong>封装一下后是这样的：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> throttle = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fn,delay</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> canRun = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> context = <span class="hljs-keyword">this</span><br>    <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">arguments</span>;<br>        <span class="hljs-keyword">if</span>(!canRun) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 注意，这里不能用timer来做标记，因为setTimeout会返回一个定时器id</span><br>        canRun = <span class="hljs-literal">false</span>;<br>    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        fn.apply(context,args) <br>        canRun = <span class="hljs-literal">true</span>;<br>    &#125;,delay)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>函数防抖：上个函数在规定延迟时间（delay）内未开始执行就接连触发的函数只执行最后触发的函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 函数防抖</span><br><span class="hljs-keyword">let</span> timer = <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'scroll'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    clearTimeout(timer); <span class="hljs-comment">// 清除未执行的代码，重置回初始化状态</span><br>    timer = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"函数防抖"</span>);<br>    &#125;, <span class="hljs-number">300</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>

<p><strong>封装一下是这样的：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> debounce = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> context = <span class="hljs-keyword">this</span><br>    <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">arguments</span><br>    clearTimeout(timer) <span class="hljs-comment">// 每次调用debounce函数都会将前一次的timer清空，确保只执行一次</span><br>    timer = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>      fn.apply(context, args)<br>    &#125;, delay)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 React Hooks 实现 赞/踩 功能</title>
    <url>/2020/07/04/zc/</url>
    <content><![CDATA[<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React, &#123; useReducer, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span><br><span class="hljs-keyword">import</span> &#123; render &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">'./app.css'</span><br><br><span class="hljs-keyword">const</span> App = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> appReducer = <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">switch</span> (action.type) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">'HANDLE_LIKE'</span>:<br>        <span class="hljs-keyword">return</span> &#123;<br>          ...state,<br>          countLikes: state.countLikes + action.payload<br>        &#125;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">'HANDLE_DISLIKE'</span>:<br>        <span class="hljs-keyword">return</span> &#123;<br>          ...state,<br>          countDislikes: state.countDislikes + action.payload<br>        &#125;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">return</span> state<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">const</span> initailState = &#123;<br>    countLikes: <span class="hljs-number">65</span>,<br>    countDislikes: <span class="hljs-number">5</span>,<br>  &#125;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = useReducer(appReducer, initailState)<br>  <span class="hljs-keyword">const</span> &#123; countLikes, countDislikes &#125; = state<br>  <span class="hljs-keyword">const</span> [status, setStatus] = useState(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> handleClickLike = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-string">'like'</span>) &#123;<br>      setStatus(<span class="hljs-literal">null</span>)<br>      dispatch(&#123;<br>        type: <span class="hljs-string">'HANDLE_LIKE'</span>,<br>        payload: <span class="hljs-number">-1</span>,<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      setStatus(<span class="hljs-string">'like'</span>)<br>      <span class="hljs-keyword">if</span> (status === <span class="hljs-string">'dislike'</span>) &#123;<br>        dispatch(&#123;<br>          type: <span class="hljs-string">'HANDLE_DISLIKE'</span>,<br>          payload: <span class="hljs-number">-1</span>,<br>        &#125;)<br>      &#125;<br>      dispatch(&#123;<br>        type: <span class="hljs-string">'HANDLE_LIKE'</span>,<br>        payload: <span class="hljs-number">1</span>,<br>      &#125;)<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">const</span> handleClickDisLike = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-string">'dislike'</span>) &#123;<br>      setStatus(<span class="hljs-literal">null</span>)<br>      dispatch(&#123;<br>        type: <span class="hljs-string">"HANDLE_DISLIKE"</span>,<br>        payload: <span class="hljs-number">-1</span>,<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      setStatus(<span class="hljs-string">'dislike'</span>)<br>      <span class="hljs-keyword">if</span> (status === <span class="hljs-string">'like'</span>) &#123;<br>        dispatch(&#123;<br>          type: <span class="hljs-string">'HANDLE_LIKE'</span>,<br>          payload: <span class="hljs-number">-1</span><br>        &#125;)<br>      &#125;<br>      dispatch(&#123;<br>        type: <span class="hljs-string">'HANDLE_DISLIKE'</span>,<br>        payload: <span class="hljs-number">1</span>,<br>      &#125;)<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=<span class="hljs-string">"container"</span>&gt;<br>      &lt;button className=&#123;status === <span class="hljs-string">'like'</span> ? <span class="hljs-string">'btn active'</span> : <span class="hljs-string">'btn'</span>&#125; onClick=&#123;handleClickLike&#125;&gt;<br>        赞<br>  &lt;span&gt;&#123;countLikes&#125;&lt;<span class="hljs-regexp">/span&gt;</span><br><span class="hljs-regexp">      &lt;/</span>button&gt;<br>      &lt;button className=&#123;status === <span class="hljs-string">'dislike'</span> ? <span class="hljs-string">'btn active'</span> : <span class="hljs-string">'btn'</span>&#125; onClick=&#123;handleClickDisLike&#125;&gt;<br>        踩<br>  &lt;span&gt;&#123;countDislikes&#125;&lt;<span class="hljs-regexp">/span&gt;</span><br><span class="hljs-regexp">      &lt;/</span>button&gt;<br>    &lt;<span class="hljs-regexp">/div&gt;</span><br><span class="hljs-regexp">  )</span><br><span class="hljs-regexp">&#125;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">render(&lt;App /</span>&gt;, <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#root'</span>))<br></code></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span>&#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span> &#123;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span> <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">background-color</span>: transparent;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#74777d</span>;<br>  <span class="hljs-attribute">outline</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:first-of-type</span>&#123;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#74777d</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#282a2e</span>;<br>&#125;<br><br><span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">6px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.active</span>, <span class="hljs-selector-class">.active</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#1b81f5</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
</search>
